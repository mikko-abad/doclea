{"version":3,"file":"index.es.js","sources":["../src/inner-editor.ts","../src/utility.ts","../src/style.ts","../src/node.ts","../src/remark-mermaid.ts","../src/index.ts"],"sourcesContent":["/* Copyright 2021, Milkdown by Mirone. */\n\nimport { EditorState, EditorView, keymap, newlineInCode, Node, StepMap, TextSelection } from '@milkdown/prose';\n\nexport const createInnerEditor = (outerView: EditorView, getPos: () => number) => {\n    let isEditing = false;\n    let innerView: EditorView | undefined;\n\n    const openEditor = ($: HTMLElement, doc: Node) => {\n        innerView = new EditorView($, {\n            state: EditorState.create({\n                doc,\n                plugins: [\n                    keymap({\n                        Tab: (state, dispatch) => {\n                            if (dispatch) {\n                                dispatch(state.tr.insertText('\\t'));\n                            }\n                            return true;\n                        },\n                        Enter: newlineInCode,\n                        'Mod-Enter': (_, dispatch) => {\n                            if (dispatch) {\n                                const { state } = outerView;\n                                const { to } = state.selection;\n                                const tr = state.tr.replaceWith(to, to, state.schema.nodes.paragraph.createAndFill());\n                                outerView.dispatch(tr.setSelection(TextSelection.create(tr.doc, to)));\n                                outerView.focus();\n                            }\n\n                            return true;\n                        },\n                    }),\n                ],\n            }),\n            dispatchTransaction: (tr) => {\n                if (!innerView) return;\n                const { state, transactions } = innerView.state.applyTransaction(tr);\n                innerView.updateState(state);\n\n                if (!tr.getMeta('fromOutside')) {\n                    const outerTr = outerView.state.tr;\n                    const offsetMap = StepMap.offset(getPos() + 1);\n\n                    transactions.forEach((transaction) => {\n                        const { steps } = transaction;\n                        steps.forEach((step) => {\n                            const mapped = step.map(offsetMap);\n\n                            if (!mapped) {\n                                throw Error('step discarded!');\n                            }\n                            outerTr.step(mapped);\n                        });\n                    });\n                    if (outerTr.docChanged) outerView.dispatch(outerTr);\n                }\n            },\n        });\n        innerView.focus();\n        const { state } = innerView;\n        innerView.dispatch(state.tr.setSelection(TextSelection.create(state.doc, 0)));\n        isEditing = true;\n    };\n\n    const closeEditor = () => {\n        if (innerView) {\n            innerView.destroy();\n        }\n        innerView = undefined;\n        isEditing = false;\n    };\n\n    return {\n        isEditing: () => isEditing,\n        innerView: () => innerView,\n        openEditor,\n        closeEditor,\n    };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { Node } from '@milkdown/prose';\nimport { customAlphabet } from 'nanoid';\n\nexport const nanoid = customAlphabet('abcedfghicklmn', 10);\n\nfunction componentToHex(c: number) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\n\nfunction rgbToHex(r: number, g: number, b: number) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nexport function tryRgbToHex(maybeRgb: string) {\n    if (!maybeRgb) return '';\n\n    const result = maybeRgb.split(',').map((x) => Number(x.trim()));\n\n    if (result.length < 3) {\n        return maybeRgb;\n    }\n\n    const valid = result.every((x) => {\n        return x >= 0 && x <= 256;\n    });\n\n    if (!valid) {\n        return maybeRgb;\n    }\n\n    return rgbToHex(...(result as [number, number, number]));\n}\n\nexport const getId = (node?: Node) => node?.attrs?.['identity'] || nanoid();\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { Utils } from '@milkdown/utils';\n\nimport { tryRgbToHex } from './utility';\n\nexport const getStyle = (utils: Utils) => {\n    const codeStyle = utils.getStyle(\n        ({ palette, size, font }, { css }) => css`\n            color: ${palette('neutral', 0.87)};\n            background-color: ${palette('background')};\n            border-radius: ${size.radius};\n            padding: 1rem 2rem;\n            font-size: 0.875rem;\n            font-family: ${font.code};\n            overflow: hidden;\n            .ProseMirror {\n                outline: none;\n            }\n        `,\n    );\n    const hideCodeStyle = utils.getStyle(\n        (_, { css }) => css`\n            display: none;\n        `,\n    );\n    const previewPanelStyle = utils.getStyle(\n        (_, { css }) => css`\n            display: flex;\n            justify-content: center;\n            padding: 1rem 0;\n        `,\n    );\n    const mermaidVariables = () => {\n        const styleRoot = getComputedStyle(document.documentElement);\n        const getColor = (v: string) => tryRgbToHex(styleRoot.getPropertyValue('--' + v));\n        const line = getColor('line');\n        const solid = getColor('solid');\n        const neutral = getColor('neutral');\n        const background = getColor('background');\n        const style = {\n            background,\n            primaryColor: background,\n            secondaryColor: line,\n            primaryTextColor: neutral,\n            noteBkgColor: background,\n            noteTextColor: solid,\n        };\n        return Object.entries(style)\n            .filter(([_, value]) => value.length > 0)\n            .map(([key, value]) => `'${key}':'${value}'`)\n            .join(', ');\n    };\n\n    return {\n        codeStyle,\n        hideCodeStyle,\n        previewPanelStyle,\n        mermaidVariables,\n    };\n};\n","/* Copyright 2021, Milkdown by Mirone. */\nimport { createCmd, createCmdKey } from '@milkdown/core';\nimport { setBlockType, textblockTypeInputRule } from '@milkdown/prose';\nimport { createNode } from '@milkdown/utils';\nimport mermaid from 'mermaid';\n\nimport { remarkMermaid } from '.';\nimport { createInnerEditor } from './inner-editor';\nimport { getStyle } from './style';\nimport { getId } from './utility';\n\nconst inputRegex = /^```mermaid$/;\n\nexport type Options = {\n    placeholder: {\n        empty: string;\n        error: string;\n    };\n};\n\nexport const TurnIntoDiagram = createCmdKey('TurnIntoDiagram');\n\nexport const diagramNode = createNode<string, Options>((utils, options) => {\n    const { mermaidVariables, codeStyle, hideCodeStyle, previewPanelStyle } = getStyle(utils);\n    const header = `%%{init: {'theme': 'base', 'themeVariables': { ${mermaidVariables()} }}}%%\\n`;\n\n    const id = 'diagram';\n    mermaid.startOnLoad = false;\n    mermaid.initialize({ startOnLoad: false });\n\n    const placeholder = {\n        empty: 'Empty',\n        error: 'Syntax Error',\n        ...(options?.placeholder ?? {}),\n    };\n\n    return {\n        id,\n        schema: () => ({\n            content: 'text*',\n            group: 'block',\n            marks: '',\n            defining: true,\n            atom: true,\n            code: true,\n            isolating: true,\n            attrs: {\n                value: {\n                    default: '',\n                },\n                identity: {\n                    default: '',\n                },\n            },\n            parseDOM: [\n                {\n                    tag: `div[data-type=\"${id}\"]`,\n                    preserveWhitespace: 'full',\n                    getAttrs: (dom) => {\n                        if (!(dom instanceof HTMLElement)) {\n                            throw new Error();\n                        }\n                        return {\n                            value: dom.dataset['value'],\n                            identity: dom.id,\n                        };\n                    },\n                },\n            ],\n            toDOM: (node) => {\n                const identity = getId(node);\n                return [\n                    'div',\n                    {\n                        id: identity,\n                        class: utils.getClassName(node.attrs, 'mermaid'),\n                        'data-type': id,\n                        'data-value': node.attrs['value'],\n                    },\n                    0,\n                ];\n            },\n            parseMarkdown: {\n                match: ({ type }) => type === id,\n                runner: (state, node, type) => {\n                    const value = node['value'] as string;\n                    state.openNode(type, { value });\n                    if (value) {\n                        state.addText(value);\n                    }\n                    state.closeNode();\n                },\n            },\n            toMarkdown: {\n                match: (node) => node.type.name === id,\n                runner: (state, node) => {\n                    state.addNode('code', undefined, node.content.firstChild?.text || '', { lang: 'mermaid' });\n                },\n            },\n        }),\n        commands: (nodeType) => [createCmd(TurnIntoDiagram, () => setBlockType(nodeType, { id: getId() }))],\n        view: () => (node, view, getPos) => {\n            const innerEditor = createInnerEditor(view, getPos);\n\n            const currentId = getId(node);\n            let currentNode = node;\n            const dom = document.createElement('div');\n            dom.classList.add('mermaid', 'diagram');\n            const code = document.createElement('div');\n            code.dataset['type'] = id;\n            code.dataset['value'] = node.attrs['value'];\n            if (codeStyle && hideCodeStyle) {\n                code.classList.add(codeStyle, hideCodeStyle);\n            }\n\n            const rendered = document.createElement('div');\n            rendered.id = currentId;\n            if (previewPanelStyle) {\n                rendered.classList.add(previewPanelStyle);\n            }\n\n            dom.append(code);\n\n            const render = (code: string) => {\n                try {\n                    if (!code) {\n                        rendered.innerHTML = placeholder.empty;\n                    } else {\n                        const svg = mermaid.render(currentId, header + code);\n                        rendered.innerHTML = svg;\n                    }\n                } catch {\n                    const error = document.getElementById('d' + currentId);\n                    if (error) {\n                        error.remove();\n                    }\n                    rendered.innerHTML = placeholder.error;\n                } finally {\n                    dom.appendChild(rendered);\n                }\n            };\n\n            render(node.attrs['value']);\n\n            return {\n                dom,\n                update: (updatedNode) => {\n                    if (!updatedNode.sameMarkup(currentNode)) return false;\n                    currentNode = updatedNode;\n\n                    const innerView = innerEditor.innerView();\n                    if (innerView) {\n                        const state = innerView.state;\n                        const start = updatedNode.content.findDiffStart(state.doc.content);\n                        if (start !== null && start !== undefined) {\n                            const diff = updatedNode.content.findDiffEnd(state.doc.content);\n                            if (diff) {\n                                let { a: endA, b: endB } = diff;\n                                const overlap = start - Math.min(endA, endB);\n                                if (overlap > 0) {\n                                    endA += overlap;\n                                    endB += overlap;\n                                }\n                                innerView.dispatch(\n                                    state.tr.replace(start, endB, node.slice(start, endA)).setMeta('fromOutside', true),\n                                );\n                            }\n                        }\n                    }\n\n                    const newVal = updatedNode.content.firstChild?.text || '';\n                    code.dataset['value'] = newVal;\n\n                    render(newVal);\n\n                    return true;\n                },\n                selectNode: () => {\n                    if (!view.editable) return;\n                    if (hideCodeStyle) {\n                        code.classList.remove(hideCodeStyle);\n                    }\n                    innerEditor.openEditor(code, currentNode);\n                    dom.classList.add('ProseMirror-selectednode');\n                },\n                deselectNode: () => {\n                    if (hideCodeStyle) {\n                        code.classList.add(hideCodeStyle);\n                    }\n                    innerEditor.closeEditor();\n                    dom.classList.remove('ProseMirror-selectednode');\n                },\n                stopEvent: (event) => {\n                    const innerView = innerEditor.innerView();\n                    const { target } = event;\n                    const isChild = target && innerView?.dom.contains(target as Element);\n                    return !!(innerView && isChild);\n                },\n                ignoreMutation: () => true,\n                destroy() {\n                    rendered.remove();\n                    code.remove();\n                    dom.remove();\n                },\n            };\n        },\n        inputRules: (nodeType) => [textblockTypeInputRule(inputRegex, nodeType, () => ({ id: getId() }))],\n        remarkPlugins: () => [remarkMermaid],\n    };\n});\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { Node } from 'unist';\nimport { visit } from 'unist-util-visit';\n\nconst createMermaidDiv = (contents: string) => ({\n    type: 'diagram',\n    value: contents,\n});\n\nconst visitCodeBlock = (ast: Node) =>\n    visit(ast, 'code', (node, index, parent) => {\n        const { lang, value } = node;\n\n        // If this codeblock is not mermaid, bail.\n        if (lang !== 'mermaid') {\n            return node;\n        }\n\n        const newNode = createMermaidDiv(value);\n\n        if (parent && index != null) {\n            parent.children.splice(index, 1, newNode);\n        }\n\n        return node;\n    });\n\nexport const remarkMermaid = () => {\n    function transformer(tree: Node) {\n        visitCodeBlock(tree);\n    }\n\n    return transformer;\n};\n","/* Copyright 2021, Milkdown by Mirone. */\n\nimport { AtomList } from '@milkdown/utils';\n\nimport { diagramNode } from './node';\n\nexport * from './remark-mermaid';\n\nexport const diagram = AtomList.create([diagramNode()]);\n\nexport type { Options } from './node';\nexport { TurnIntoDiagram } from './node';\n"],"names":[],"mappings":"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"}